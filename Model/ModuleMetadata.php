<?php
/**
 * MagedIn Technology
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  MagedIn
 * @copyright Copyright (c) 2024 MagedIn Technology.
 *
 * @author    MagedIn Support <support@magedin.com>
 */
declare(strict_types = 1);

namespace MagedIn\Frenet\Model;

use Magento\Framework\App\CacheInterface;
use Magento\Framework\App\Config;
use Magento\Framework\Component\ComponentRegistrar;
use Magento\Framework\Component\ComponentRegistrarInterface;
use Magento\Framework\Composer\ComposerInformation;
use Magento\Framework\Exception\FileSystemException;
use Magento\Framework\Filesystem\Driver\File;
use Magento\Framework\Serialize\SerializerInterface;

/**
 * Class ModuleMetadata
 */
class ModuleMetadata
{
    /**
     * @var string
     */
    const MODULE_NAME = 'MagedIn_Frenet';

    /**
     * @var string
     */
    const PACKAGE_NAME = 'magedin/module-frenet';

    /**
     * @var string
     */
    const PACKAGE_TYPE = 'magento-module';

    /**
     * @var string
     */
    const VERSION_CACHE_KEY = 'module-frenet-shipping-version';

    /**
     * @var ComposerInformation
     */
    private ComposerInformation $composerInformation;

    /**
     * @var string
     */
    private ?string $version = null;

    /**
     * @var array
     */
    private array $package = [];

    /**
     * @var CacheInterface
     */
    private CacheInterface $cache;

    /**
     * @var SerializerInterface
     */
    private SerializerInterface $serializer;

    /**
     * @var ComponentRegistrarInterface
     */
    private ComponentRegistrarInterface $componentRegistrar;

    /**
     * @var File
     */
    private File $driver;

    /**
     * @param ComposerInformation $composerInformation
     * @param CacheInterface $cache
     * @param SerializerInterface $serializer
     * @param ComponentRegistrarInterface $componentRegistrar
     * @param File $driver
     */
    public function __construct(
        ComposerInformation $composerInformation,
        CacheInterface $cache,
        SerializerInterface $serializer,
        ComponentRegistrarInterface $componentRegistrar,
        File $driver
    ) {
        $this->composerInformation = $composerInformation;
        $this->cache = $cache;
        $this->serializer = $serializer;
        $this->componentRegistrar = $componentRegistrar;
        $this->driver = $driver;
    }

    /**
     * @return string
     */
    public function getName() : string
    {
        return self::PACKAGE_NAME;
    }

    /**
     * @return string
     */
    public function getType() : string
    {
        return self::PACKAGE_TYPE;
    }

    /**
     * Get Product version
     *
     * @return string
     */
    public function getVersion(): string
    {
        $this->version = $this->version ?: $this->cache->load(self::VERSION_CACHE_KEY);
        if (!$this->version) {
            $this->version = $this->getPackageVersion();
            $this->cache->save($this->version, self::VERSION_CACHE_KEY, [Config::CACHE_TAG]);
        }
        return $this->version;
    }

    /**
     * Get version from module package
     *
     * @return string
     */
    private function getPackageVersion(): string
    {
        $package = $this->getPackage();

        if (isset($package['version'])) {
            return $package['version'] . ' ' . __('(Installed Via Composer)');
        }

        if ($this->getLocalVersion()) {
            return $this->getLocalVersion();
        }

        return (string) __('Unknown Module Version');
    }

    /**
     * @return array
     */
    private function getPackage() : array
    {
        $this->preparePackage();

        if ($this->package) {
            return $this->package;
        }

        return [];
    }

    /**
     * @return void
     */
    private function preparePackage(): void
    {
        if ($this->package) {
            return;
        }
        $packages = $this->composerInformation->getInstalledMagentoPackages();
        if (isset($packages[self::PACKAGE_NAME])) {
            $this->package = $packages[self::PACKAGE_NAME];
        }
    }

    /**
     * @return string|null
     */
    private function getLocalVersion(): ?string
    {
        if ($this->version) {
            return $this->version;
        }

        $metadata = $this->getLocalComposerInfo();
        if (!isset($metadata['version'])) {
            return null;
        }

        $this->version = $metadata['version'] . ' ' . __('(Installed in app/code)');
        return $this->version;
    }

    /**
     * @return array
     */
    private function getLocalComposerInfo(): array
    {
        $moduleDir = $this->componentRegistrar->getPath(ComponentRegistrar::MODULE, self::MODULE_NAME);
        $composerDir = $moduleDir . DIRECTORY_SEPARATOR . 'composer.json';
        try {
            if (!$this->driver->isFile($composerDir) || !$this->driver->isReadable($composerDir)) {
                return [];
            }
            $content = $this->driver->fileGetContents($composerDir);
        } catch (FileSystemException $e) {
            return [];
        }
        return (array) $this->serializer->unserialize($content);
    }
}
